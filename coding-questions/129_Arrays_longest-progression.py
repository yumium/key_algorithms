# Google Kickstart: 2021 - Round B

import bisect


def longest_arithmetic_subarray_old(N, a):
    '''
    Given:
        N: Length of array
        a: Input array of non-negative integers
            2 <= N <= 2000 (N <= 3E5)
    Return:
        Maximum length of subarray of `a` s.t. changing 1 number would give an arithmetic subarray
            Number changed can be negative
    
    Example:
    [9,7,5,3]
    ans = 4
    
    [5, 5, 4, 5, 5, 5, 4, 5, 6]
    ans = 6
    
    [8, 5, 2, 0]
    ans = 4 (changing 0 to -1)
    
    Obs:
    - Will always have answer (of at least 2)
    - We can represent the array as one of differences
        - The longest arithmetic subarray is a function on differences
        - Example:
        - [5,5,4,5,5,5,4,5,6]
        - Diff: [0,1,-1,0,0,1,-1,-1]
        - Here, longest arithmetic subarray has length 3
    - To maximise length of arithmetic subarray, we need to maximise length of uniform subarray in difference array
    - When we change a number, we change 1 or 2 adjacent numbers in difference array
    - A delta in the number would have negative delta on left difference, and positive delta on right difference
        - a-(b+delta) = (a-b) - delta
        - (b+delta)-c = (b-c) + delta
        - orig: [5,5,4,5,5,5,4,5,6]
            - diff: [0,1,-1,0,0,1,-1,-1]
        - new: [5,5,5,5,5,5,4,5,6]
            - diff: [0,0,0,0,0,1,-1,-1]
    - The key is then to find such delta that maximises length of uniform subarray in difference array
    
    a)
        i) The `xx` is on its own
            - No neighbours => no change
            - 1 neighbour => Match to neighbour, adding 1 to neighbour
            - 2 neighbours => Match to 1 neighbour or both at same time, adding 1 to one or both neighbours
        ii) The `xx` is part of a larger group
            - 1 side in group
                - This removes 1 from group, one of the `x` can join its neighbour, adding 1 to neighbour (if exists)
            (- both sides in group
                - This breaks up the group, net loss)
        iii) `xx` are not equal to each other
            - No neighbours => If we can make `xx` equal, this gives length 3
            - Otherwise, match to as many neighbours I have
                - 1 neighbour => Match neighbour, adding 1 or 2
                - 2 neighbours => Each `x` try matching the neighbour, this can
                    - increase 1 to its neighbour, or
                    - increase 1 to both neighbours, or
                    - join neighbours all together if `xx` equal

    TIME: O(N^2)
    SPACE: O(N)
    '''
    if N == 2:
        return 2  # Make one match the other

    # Difference array
    diff = [a[i]-a[i+1] for i in range(len(a)-1)]

    cur_max = max_uniform_subarray(diff)
    
    # Check left-most number
    if diff[0] != diff[1]:
        diff_copy = diff.copy()
        diff_copy[0] = diff_copy[1]
        cur_max = max(cur_max, max_uniform_subarray(diff_copy))
    
    # Check right-most number
    if diff[-1] != diff[-2]:
        diff_copy = diff.copy()
        diff_copy[-1] = diff_copy[-2]
        cur_max = max(cur_max, max_uniform_subarray(diff_copy))
    
    # Check middle
    len_diff = len(diff)
    for i in range(len_diff-1):
        # `xx` equal
        if diff[i] == diff[i+1]:
            # `xx` on its own
            if (i-1 < 0 or diff[i-1] != diff[i]) and (i+2 >= len_diff or diff[i+2] != diff[i+1]):
                
                # Match to all available neighbours
                if i-1 >= 0:
                    cur_max = max(cur_max, match_left(diff, i))
                if i+2 < len_diff:
                    cur_max = max(cur_max, match_left(diff, i+1))
            
            # `xx` part of larger group
            else:
                # both sides in group
                if i-1 >= 0 and diff[i-1] == diff[i] and i+2 < len_diff and diff[i+2] == diff[i+1]:
                    pass  # Modifying will not produce better result
                # one side in group
                else:
                    # Match right
                    if i-1 >= 0 and diff[i-1] == diff[i] and i+2 < len_diff:
                        cur_max = max(cur_max, match_right(diff, i+1))
                    
                    # Match left
                    elif i+2 < len_diff and diff[i+2] == diff[i+1] and i-1 >= 0:
                        cur_max = max(cur_max, match_left(diff, i))

        # `xx` not equal
        else:
            # No neighbours
            if i-1 < 0 and i+2 >= len_diff and (diff[i] - diff[i+1]) % 2 == 0:
                cur_max = max(cur_max, 2)
            
            # Have neighbours
            else:
                # Match left
                if i-1 >= 0:
                    cur_max = max(cur_max, match_left(diff, i))
                
                # Match right
                if i+2 < len_diff:
                    cur_max = max(cur_max, match_right(diff, i+1))
    
    
    return cur_max+1


def max_uniform_subarray(a):
    # Pre: len(a) >= 2
    cur_length = 1
    max_length = 1
    
    for i in range(1, len(a)):
        if a[i] == a[i-1]:
            cur_length += 1
            max_length = max(max_length, cur_length)
        else:
            cur_length = 1
    
    return max_length


def match_left(diff, i):
    diff_copy = diff.copy()
    delta = diff_copy[i-1] - diff_copy[i]
    diff_copy[i]  += delta
    diff_copy[i+1] -= delta
    return max_uniform_subarray(diff_copy)

def match_right(diff, i):
    diff_copy = diff.copy()
    delta = diff_copy[i+1] - diff_copy[i]
    diff_copy[i]  += delta
    diff_copy[i-1] -= delta
    return max_uniform_subarray(diff_copy)

def longest_arithmetic_subarray_2(N, a, idx=None):
    '''
    Given:
        N: Length of array
        a: Input array of non-negative integers
            2 <= N <= 2000 (N <= 3E5)
    Return:
        Maximum length of subarray of `a` s.t. changing 1 number would give an arithmetic subarray
            Number changed can be negative
    
    Example:
    [9,7,5,3]
    ans = 4
    
    [5, 5, 4, 5, 5, 5, 4, 5, 6]
    ans = 6
    
    [8, 5, 2, 0]
    ans = 4 (changing 0 to -1)
    
    Obs:
    - Will always have answer (of at least 2)
    - We can represent the array as one of differences
        - The longest arithmetic subarray is a function on differences
        - Example:
        - [5,5,4,5,5,5,4,5,6]
        - Diff: [0,1,-1,0,0,1,-1,-1]
        - Here, longest arithmetic subarray has length 3
    - To maximise length of arithmetic subarray, we need to maximise length of uniform subarray in difference array
    - When we change a number, we change 1 or 2 adjacent numbers in difference array
    - A delta in the number would have negative delta on left difference, and positive delta on right difference
        - a-(b+delta) = (a-b) - delta
        - (b+delta)-c = (b-c) + delta
        - orig: [5,5,4,5,5,5,4,5,6]
            - diff: [0,1,-1,0,0,1,-1,-1]
        - new: [5,5,5,5,5,5,4,5,6]
            - diff: [0,0,0,0,0,1,-1,-1]
    - The key is then to find such delta that maximises length of uniform subarray in difference array
    
    a)
        i) The `xx` is on its own
            - No neighbours => no change
            - 1 neighbour => Match to neighbour, adding 1 to neighbour
            - 2 neighbours => Match to 1 neighbour or both at same time, adding 1 to one or both neighbours
        ii) The `xx` is part of a larger group
            - 1 side in group
                - This removes 1 from group, one of the `x` can join its neighbour, adding 1 to neighbour (if exists)
            (- both sides in group
                - This breaks up the group, net loss)
        iii) `xx` are not equal to each other
            - No neighbours => If we can make `xx` equal, this gives length 3
            - Otherwise, match to as many neighbours I have
                - 1 neighbour => Match neighbour, adding 1 or 2
                - 2 neighbours => Each `x` try matching the neighbour, this can
                    - increase 1 to its neighbour, or
                    - increase 1 to both neighbours, or
                    - join neighbours all together if `xx` equal

    TIME: O(N^2)
    SPACE: O(N)
    '''
    if N == 2:
        return 2  # Make one match the other

    # Difference array
    diff = [a[i]-a[i+1] for i in range(len(a)-1)]

    # Segment array
    segs = []
    for i in range(1, len(diff)):
        if diff[i] != diff[i-1]:
            segs.append(i)
    segs.append(len(diff))

    with open('out.txt', 'w') as f:
        f.write(str(diff))

    cur_max = max_uniform_subarray(diff)
    
    # Check left-most number
    if diff[0] != diff[1]:
        cur_max = max(cur_max, size_of(segs, 1)+1)
    
    # Check right-most number
    if diff[-1] != diff[-2]:
        cur_max = max(cur_max, size_of(segs, len(diff)-2)+1)
    

    if idx == 35:
        printed = False
        print(cur_max)

    # Check middle
    len_diff = len(diff)
    for i in range(len_diff-1):
        # `xx` equal
        if diff[i] == diff[i+1]:
            # `xx` on its own
            if (i-1 < 0 or diff[i-1] != diff[i]) and (i+2 >= len_diff or diff[i+2] != diff[i+1]):
                
                # Match to all available neighbours
                if i-1 >= 0:
                    cur_max = max(cur_max, size_of(segs, i-1)+1)
                if i+2 < len_diff:
                    cur_max = max(cur_max, size_of(segs, i+2)+1)
            
            # `xx` part of larger group
            else:
                # both sides in group
                if i-1 >= 0 and diff[i-1] == diff[i] and i+2 < len_diff and diff[i+2] == diff[i+1]:
                    pass  # Modifying will not produce better result
                # one side in group
                else:
                    # Match right
                    if i-1 >= 0 and diff[i-1] == diff[i] and i+2 < len_diff:
                        cur_max = max(cur_max, size_of(segs, i+2)+1)
                    
                    # Match left
                    elif i+2 < len_diff and diff[i+2] == diff[i+1] and i-1 >= 0:
                        cur_max = max(cur_max, size_of(segs, i-1)+1)

        # `xx` not equal
        else:
            # No neighbours
            if i-1 < 0 and i+2 >= len_diff and (diff[i] - diff[i+1]) % 2 == 0:
                cur_max = max(cur_max, 2)
            
            # Have neighbours
            else:
                # Match left
                if i-1 >= 0:
                    if diff[i-1] - diff[i] == diff[i+1] - diff[i-1]:
                        cur_max = max(cur_max, size_of(segs, i-1)+2)
                    else:
                        cur_max = max(cur_max, size_of(segs, i-1)+1)
                
                # Match right
                if i+2 < len_diff:
                    if diff[i+1] - diff[i+2] == diff[i+2] - diff[i]:
                        cur_max = max(cur_max, size_of(segs, i+2)+2)
                    else:
                        cur_max = max(cur_max, size_of(segs, i+2)+1)

                # Merging
                # if i-1 >= 0 and i+2 < len_diff and diff[i-1] == diff[i+2] and diff[i-1] - diff[i] == diff[i+2] - diff[i+1] and (diff[i] - diff[i+1]) % 2 == 0:
                if i-1 >= 0 and i+2 < len_diff:
                    delta = diff[i-1] - diff[i]
                    if diff[i-1] == diff[i] + delta == diff[i+1] - delta == diff[i+2]:
                        print(diff[i-1:i+3])
                        cur_max = max(cur_max, size_of(segs, i-1) + size_of(segs, i+2) + 2)
    
        if idx == 35 and not printed and cur_max > 3:
            print(i)
            print(cur_max)
            printed = True

    return cur_max+1

def size_of(segs, i):
    assert 0 <= i < segs[-1]

    j = bisect.bisect_right(segs, i)
    if j == 0:
        return segs[j]
    else:
        return segs[j] - segs[j-1]


def longest_arithmetic_subarray(N, a, idx=None):
    if len(a) == 2:
        return 2

    # Difference array of `a`
    diff = [a[i] - a[i+1] for i in range(len(a)-1)]

    # Segment array of `diff`
    segs = []
    for i in range(1, len(diff)):
        if diff[i] != diff[i-1]:
            segs.append(i)
    segs.append(len(diff))

    curmax = max_uniform_subarray(diff)
    # if curmax > 10: print(f"curmax = {curmax}, i = {i}")

    # Check left most diff
    if diff[0] != diff[1]:
        l, r = segs_of(segs, 1)
        curmax = max(curmax, r)

    # Check right most diff
    if diff[-1] != diff[i-2]:
        l, r = segs_of(segs, len(diff)-2)
        curmax = max(curmax, len(diff)-l)

    for i in range(len(diff)-1):
        # Make them equal?
        if (diff[i] - diff[i+1]) % 2 == 0:
            x = y = (diff[i] + diff[i+1]) / 2
            curmax = max(curmax, update(x, y, i, diff, segs))
            # if curmax > 9: print(f"curmax = {curmax}, i = {i}, making equal")

        # Match right?
        if i+2 < len(diff):
            delta = diff[i+2] - diff[i+1]
            y = diff[i+1] + delta
            x = diff[i] - delta
            curmax = max(curmax, update(x, y, i, diff, segs))
            # if curmax > 9: print(f"curmax = {curmax}, i = {i}, match right")

        # Match left?
        if i-1 >= 0:
            # if i == 132:
                # print('here')
            delta = diff[i-1] - diff[i]
            x = diff[i] + delta
            y = diff[i+1] - delta
            curmax = max(curmax, update(x, y, i, diff, segs))
            # if curmax > 9: print(f"curmax = {curmax}, i = {i}, match left")


    return curmax+1


def segs_of(segs, i):
    '''
    Return the segment of contiguous region around index `i`, given segments `segs`
    '''
    assert 0 <= i < segs[-1]

    j = bisect.bisect_right(segs, i)
    if j == 0:
        return (0, segs[j])
    else:
        return (segs[j-1], segs[j])

def update(x, y, i, diff, segs):
    '''
    Return potential new curmax given changes
        diff[i] => x
        diff[i+1] => y
        original diff array `diff`
        segment array `segs`
    '''
    left = 0
    if i-1 >= 0 and diff[i-1] == x:
        l, r = segs_of(segs, i-1)
        left = i-l
    
    right = 0
    if i+2 < len(diff) and diff[i+2] == y:
        l, r = segs_of(segs, i+2)
        right = r-i-2
    
    if x == y:
        # print(f"Equal => i = {i}, left = {left}, right = {right}, res = {2 + left + right}")
        return 2 + left + right
    else:
        # left_ = 0 if diff[i-1] != x else 1+left
        # right_ = 0 if diff[i+2] != y else 1+right
        # print(f"Not equal => i = {i}, left = {left}, right = {right}, res = {max(left,right) + 1}")
        return max(left, right) + 1

arr_example = [515329516, 515326247, 515322978, 515319709, 125972260, 383730091, 383733204, 383736317, 383739430, 383742543, 383745656, 254205621, 383751882, 383754995, 383758108, 230383835, 654447065, 230376455, 230372765, 981823382, 981819031, 966882361, 981810329, 981805978, 723746265, 723752592, 723758919, 723765246, 723771573, 723777900, 723784227, 344691001, 723796881, 723803208, 884182850, 884173991, 884165132, 884156273, 884147414, 884138555, 884129696, 884120837, 126039410, 750634934, 750626480, 584461002, 750609572, 163118607, 163126548, 751167515, 751172190, 751176865, 755136165, 751186215, 751190890, 751195565, 817947954, 739621999, 739629559, 161377287, 562342259, 161360625, 192736734, 920334940, 192752910, 192760998, 584674898, 773412672, 773417594, 773422516, 773427438, 773432360, 773437282, 347349795, 347357794, 347365793, 347373792, 347381791, 347389790, 607138417, 793675557, 793669071, 793662585, 793656099, 793649613, 919432944, 793636641, 793630155, 793623669, 793617183, 81212717, 81221556, 837020640, 378368788, 378363593, 264910155, 378353203, 378348008, 466931741, 466936913, 466942085, 466947257, 466952429, 466957601, 184768368, 466967945, 466973117, 466978289, 142655847, 430643579, 142659223, 142660911, 142662599, 142664287, 656918004, 843332165, 656929336, 345456031, 345452617, 354922611, 345445789, 551522173, 551525428, 551528683, 551531938, 551535193, 496091132, 551541703, 551544958, 551548213, 787142751, 896805105, 896802348, 896799591, 278483054, 278480297, 278477540, 278474783, 278472026, 278469269, 278466512, 278463755, 57021030, 657342027, 20560319, 657327571, 657320343, 657313115, 657305887, 657298659, 657291431, 657284203, 982718932, 476611708, 476609433, 476607158, 476604883, 476602608, 33565781, 79662822, 33562793, 33561299, 33559805, 33558311, 33556817, 33555323, 316689278, 316689820, 316690362, 316690904, 316691446, 316691988, 321220984, 785090577, 645233578, 714233673, 714223812, 714213951, 714204090, 714194229, 714184368, 714174507, 714164646, 414594640, 414584715, 414574790, 414564865, 823754875, 594906225, 594899425, 460052612, 460050835, 460049058, 135061323, 307073767, 307076553, 347641995, 307082125, 307084911, 307087697, 307090483, 758546951, 669423775, 669417316, 669410857, 669404398, 669397939, 669391480, 491104779, 345794688, 345801902, 345809116, 345816330, 345823544, 345830758, 809811649, 193731413, 193730229, 193729045, 507264882, 507259658, 437258146, 437259737, 437261328, 437262919, 437264510, 445476976, 437267692, 357693090, 357695040, 357696990, 357698940, 543927391, 357702840, 357704790, 578732469, 578728224, 578723979, 578719734, 578715489, 578711244, 578706999, 578702754, 63509583, 578694264, 554285605, 47363782, 47354928, 47346074, 47337220, 47328366, 690689424, 47310658, 47301804, 47292950, 47284096, 161052648, 161045064, 161037480, 2006291, 161022312, 161014728, 161007144, 822306512, 822304341, 822302170, 822299999, 822297828, 822295657, 822293486, 822291315, 822289144, 532345225, 171213663, 171214787, 541399977, 171217035, 171218159, 171219283, 171220407, 171221531, 171222655, 171223779, 123240123, 123235161, 123230199, 386429592, 478111632, 188903640, 188910544, 188917448, 188924352, 188931256, 613326666, 188945064, 188951968, 188958872, 113417895, 405071136, 405063398, 405055660, 405047922, 800885910, 800893007, 800900104, 800907201, 456088974, 800921395, 800928492, 800935589, 679575556, 3707314, 3708964, 206764489, 206755014, 206745539, 726065983, 206726589, 206717114, 206707639, 206698164, 206688689, 206679214, 192655397, 192647988, 192640579, 217816867, 192625761, 192618352, 192610943, 192603534, 192596125, 284809708, 284813053, 337526744, 284819743, 284823088, 284826433, 284829778, 284833123, 284836468, 296900629, 296899311, 296897993, 296896675, 296895357, 296894039, 296892721, 28696821, 296890085, 135063794, 135062330, 135060866, 135059402, 135057938, 46415548, 135055010, 123360477, 123364918, 123369359, 396658540, 123378241, 123382682, 123387123, 989078985, 989087356, 989095727, 927277508, 989112469, 966067589, 958140180, 958135434, 958130688, 958125942, 958121196, 335078497, 430853047, 430859428, 430865809, 430872190, 430878571, 891597029, 430891333, 430897714, 430904095, 356473620, 58859773, 524650992, 194283559, 524651596, 524651898, 524652200, 524652502, 524652804, 524653106, 524653408, 292689537, 292691845, 292694153, 805528126, 500818547, 375733848, 375740426, 375747004, 375753582, 503532099, 631000938, 630999955, 630998972, 630997989, 630997006, 318617405, 318627090, 46158777, 46153450, 46148123, 46142796, 712923639, 46132142, 707003173, 341547546, 706983447, 309636492, 309636336, 309636180, 309636024, 309635868, 309635712, 309635556, 309635400, 160722366, 309635088, 728604859, 145769808, 145771793, 145773778, 145775763, 145777748, 145779733, 330220074, 330218496, 330216918, 330215340, 614372368, 330212184, 330210606, 330209028, 187955956, 187956979, 282815255, 187959025, 187960048, 187961071, 32213088, 2570130, 2561421, 2552712, 679800462, 718173013, 718174167, 642839335, 642841059, 642842783, 642844507, 642846231, 942374350, 642849679, 642851403, 642853127, 642854851, 612518235, 777443555, 612532437, 612539538, 612546639, 612553740, 612560841, 612567942, 322613858, 322609119, 375361758, 105132164, 105130776, 648489593, 105128000, 105126612, 221484309, 221484671, 210911283, 221485395, 366903593, 62841534, 366903375, 133628693, 383929087, 133637983, 133642628, 133647273, 133651918, 834563719, 834556413, 834549107, 834541801, 834534495, 834527189, 834519883, 701768464, 946104375, 284137121, 284141015, 284144909, 284148803, 284152697, 760617110, 554726676, 760601490, 760593680, 760585870, 760578060, 760570250, 760562440, 760554630, 760546820, 966663226, 966670173, 755111834, 966684067, 966691014, 966697961, 966704908, 966711855, 901695147, 901693021, 901690895, 901688769, 969671924, 901684517, 637092837, 637090314, 35074419, 311441044, 603080670, 603076956, 603073242, 603069528, 603065814, 603062100, 603058386, 632251981, 48516336, 632249693, 736873315, 177014226, 736866395, 736862935, 736859475, 736856015, 371146313, 371152926, 753528009, 371166152, 371172765, 371179378, 371185991, 371192604, 371199217, 940876768, 106652799, 106643543, 106634287, 106625031, 106615775, 193436717, 576074169, 576070106, 576066043, 576061980, 576057917, 576053854, 576049791, 558923667, 213378941, 558910131, 558903363, 558896595, 558889827, 128415461, 965738688, 128422567, 128426120, 128429673, 355378768, 355384250, 159913599, 850947410, 850951009, 980703561, 815179352, 815172310, 815165268, 815158226, 815151184, 49259320, 815137100, 815130058, 815123016, 808134021, 541835916, 808119367, 808112040, 68551726, 784947340, 784944917, 784942494, 784940071, 315820844, 338924650, 315826194, 315828869, 315831544, 315834219, 315836894, 315839569, 315842244, 315844919, 30229515, 30228658, 30227801, 30226944, 30226087, 30225230, 280876303, 30223516, 670001781, 143139827, 669985003, 669976614, 669968225, 669959836, 128144952, 128151348, 709875885, 709867563, 709859241, 709850919, 132018977, 491630860, 491640410, 491649960, 491659510, 491669060, 491678610, 329818826, 491697710, 439114081, 439121242, 524991562, 524992767, 948595336, 948600313, 948605290, 948610267, 649232455, 948620221, 948625198, 948630175, 777251130, 180033888, 180035726, 396589878, 180039402, 180041240, 180043078, 101949526, 101952690, 101955854, 101959018, 101962182, 101965346, 101968510, 101971674, 125970186, 40790090, 40786480, 360482909, 40779260, 40775650, 40772040, 40768430, 40764820, 40761210, 13981613, 778964885, 778959438, 778953991, 778948544, 778943097, 484527220, 484529845, 484532470, 172455831, 484537720, 484540345, 484542970, 484545595, 484548220, 232540359, 232531613, 232522867, 932821258, 232505375, 232496629, 232487883, 232479137, 993051145, 755562486, 73762060, 755576018, 467562596, 467554923, 467547250, 467539577, 467531904, 467524231, 388871552, 467508885, 20729644, 695847960, 92196341, 92199560, 92202779, 92205998, 92209217, 92212436, 92215655, 92218874, 92222093, 855492202, 634180734, 278375569, 278381527, 911866495, 911862466, 911858437, 290060533, 446884790, 383691786, 446883774, 343343370, 343350752, 343358134, 343365516, 343372898, 836390623, 343387662, 343395044, 343402426, 334666339, 259990461, 259985397, 259980333, 259975269, 259970205, 259965141, 259960077, 259955013, 259949949, 848733822, 848743327, 899126461, 274312028, 758209218, 274320042, 274324049, 148591815, 148596842, 148601869, 148606896, 947525517, 148616950, 148621977, 109305579, 59990346, 59999888, 60009430, 60018972, 60028514, 60038056, 60047598, 60057140, 401676402, 951080179, 951070664, 756456231, 59346801, 756446563, 756441729, 756436895, 756432061, 756427227, 756422393, 756417559, 541271201, 541279859, 541288517, 541297175, 690204389, 541314491, 541323149, 24557416, 492856855, 521628922, 492875389, 492884656, 492893923, 291197497, 291205643, 291213789, 291221935, 340730035, 756668059, 756661638, 302606302, 756648796, 428618114, 428623505, 428628896, 428634287, 428639678, 428645069, 428650460, 868254600, 428661242, 942830486, 53524776, 942829596, 942829151, 785524045, 785526489, 785528933, 764993631, 785533821, 785536265, 785538709, 349302220, 948542471, 948538956, 948535441, 948531926, 14560187, 706292319, 262159871, 706311381, 706320912, 706330443, 706339974, 422158339, 422152160, 422145981, 422139802, 74456173, 422127444, 954964566, 954972275, 954979984, 954987693, 332168379, 955003111, 683447525, 19390724, 683430443, 683421902, 683413361, 683404820, 683396279, 572398958, 572402606, 572406254, 354564994, 572413550, 701032021, 701032807, 624151483, 105820982, 624137877, 624131074, 624124271, 624117468, 624110665, 624103862, 624097059, 850525008, 254770617, 528335675, 528341492, 916584955, 916594261, 916603567, 916612873, 916622179, 916631485, 916640791, 642201872, 916659403, 916668709, 937009347, 906856847, 937024415, 937031949, 418431271, 321733114, 321740849, 321748584, 321756319, 337515044, 494195427, 977121, 977751, 978381, 514839134, 514837087, 799363863, 857633134, 857641782, 95245893, 95241947, 95238001, 95234055, 95230109, 134429442, 95222217, 95218271, 36827388, 36820013, 833009736, 518460338, 738201288, 518478118, 518487008, 518495898, 518504788, 518513678, 93850542, 265161756, 265157661, 927697530, 927706039, 869680351, 754095009, 754094828, 487157191, 836114296, 836108637, 836102978, 836097319, 836091660, 836086001, 836080342, 836074683, 836069024, 429154614, 429144734, 700303103, 429124974, 429115094, 429105214, 429095334, 429085454, 429075574, 429065694, 571824824, 571826522, 571828220, 571829918, 571831616, 571833314, 571835012, 85028575, 571838408, 571840106, 96084060, 763549362, 96100158, 96108207, 539757362, 539750324, 539743286, 643050418, 539729210, 262006554, 960128424, 261992958, 261986160, 261979362, 35719927, 35727402, 35734877, 35742352, 868023030, 35757302, 35764777, 457433256, 457435011, 765165655, 765163523, 765161391, 765159259, 765157127, 911395996, 765152863, 765150731, 765148599, 19369809, 19367846, 19365883, 19363920, 19361957, 19359994, 308226187, 19356068, 531610001, 515024424, 515017164, 515009904, 256908010, 256914139, 414674215, 414670912, 414667609, 414664306, 414661003, 414657700, 414654397, 414651094, 388492432, 146598454, 146605798, 994814494, 991166161, 994802424, 994796389, 994790354, 492031304, 492030996, 756823055, 755051770, 755049274, 755046778, 755044282, 755041786, 755039290, 753946755, 99621433, 781554903, 781558996, 781563089, 238096995, 781571275, 720448000, 720454465, 27881708, 720467395, 720473860, 720480325, 720486790, 386395564, 386399613, 770585110, 386407711, 386411760, 386415809, 386419858, 110140835, 110133422, 110126009, 110118596, 110111183, 426872535, 488200244, 488197851, 488195458, 383205644, 488190672, 488188279, 488185886, 488183493, 580521183, 433936260, 433928671, 433921082, 433913493, 433905904, 433898315, 433890726, 433883137, 433875548, 696094414, 696088100, 696081786, 696075472, 696069158, 429812161, 696056530, 696050216, 696043902, 696037588, 323506424, 923085606, 649310933, 649309993, 649309053, 649308113, 215678870, 620253463, 620254103, 619462616, 620255383, 620256023, 159916753, 159911227, 366150300, 159900175, 159894649, 159889123, 981900852, 981900495, 981900138, 981899781, 573155893, 981899067, 862018250, 862020764, 584493205, 423547794, 423549410, 423551026, 423552642, 423554258, 423555874, 423557490, 390593498, 188886681, 188877674, 188868667, 803262485, 188850653, 188841646, 188832639, 47838857, 47848749, 47858641, 472939153, 47878425, 47888317, 47898209, 47908101, 47917993, 47927885, 708117290, 708108331, 911342541, 708090413, 708081454, 708072495, 258379373, 258386530, 258393687, 258400844, 863304177, 627077179, 627078614, 520521171, 520515481, 520509791, 802444195, 520498411, 520492721, 520487031, 520481341, 931011967, 931009069, 901244133, 512569073, 512569808, 512570543, 119177932, 512572013, 512572748, 512573483, 512574218, 627030982, 802762433, 627022024, 627017545, 627013066, 627008587, 627004108, 626999629, 52361086, 52366921, 52372756, 2946412, 52384426, 135975412, 637840358, 135981002, 135983797, 135986592, 939976888, 939978389, 939979890, 649088117, 939982892, 939984393, 939985894, 939987395, 939988896, 83909735, 299762388, 83928021, 83937164, 83946307, 83955450, 494458204, 210216356, 375386040, 375376125, 375366210, 375356295, 732597674, 732593750, 732589826, 732585902, 732581978, 255639205, 732574130, 593256785, 593250427, 593244069, 593237711, 593231353, 593224995, 593218637, 593212279, 591607005, 593199563, 374455451, 374450840, 374446229, 374441618, 374437007, 133725098, 374427785, 374423174, 374418563, 374413952, 20044137, 678312288, 265112239, 265113119, 265113999, 265114879, 265115759, 265116639, 669163355, 33477805, 537815251, 537817315, 537819379, 537821443, 537823507, 537825571, 537827635, 537829699, 537831763, 414503596, 414505765, 414507934, 414510103, 414512272, 414514441, 998547723, 89143306, 558790849, 558797969, 558805089, 558812209, 558819329, 558826449, 558833569, 990036939, 714065226, 714068715, 714072204, 744907978, 744901856, 174473234, 461845876, 461849866, 461853856, 461857846, 278750657, 461865826, 100900199, 168603221, 168609328, 168615435, 168621542, 168627649, 168633756, 168639863, 168645970, 244854530, 244850248, 963687628, 244841684, 502304149, 608847873, 608840467, 608833061, 608825655, 608818249, 357022962, 357026759, 671839176, 538794544, 671820460, 212508885, 212517272, 812597014, 691804647, 812589502, 812585746, 812581990, 177208430, 177207779, 177207128, 177206477, 177205826, 308757358, 828622378, 828629745, 828637112, 828644479, 828651846, 293923115, 732465355, 792614586, 792610013, 792605440, 10694639, 10699974, 10705309, 10710644, 281669991, 892309692, 892314966, 892320240, 593101031, 892330788, 892336062, 892341336, 892346610, 892351884, 892357158, 141347574, 945277453, 141362178, 241417415, 461440225, 461437586, 461434947, 461432308, 461429669, 461427030, 461424391, 966848611, 966854223, 966859835, 966865447, 966871059, 966876671, 553260910, 966887895, 966893507, 7891397, 7897361, 7903325, 416168635, 7915253, 7921217, 292602206, 675410683, 292597812, 292595615, 292593418, 803284068, 803282932, 821899893, 803280660, 803279524, 803278388, 803277252, 803276116, 388593741, 388602872, 388612003, 388621134, 388630265, 388639396, 388648527, 388657658, 764240347, 388675920, 711968243, 711964389, 711960535, 711956681, 711952827, 711948973, 711945119, 711941265, 867365076, 711933557, 915181470, 469221449, 469223297, 469225145, 469226993, 469228841, 469230689, 469232537, 469234385, 670029321, 670028508, 670027695, 670026882, 670026069, 650966698, 670024443, 180092411, 180094779, 180097147, 869943155, 297290168, 297285728, 547186066, 297276848, 297272408, 297267968, 704661092, 704656916, 704652740, 704648564, 704644388, 497881927, 754059041, 461928208, 754068355, 754073012, 754077669, 264795524, 264788371, 933718698, 465302232, 924208545, 924198606, 924188667, 797800955, 337695535, 337704770, 249269179, 75020972, 75027789, 75034606, 182099112, 714292231, 714293053, 714293875, 714294697, 714295519, 459251751, 357176437, 459271169, 459280878, 459290587, 459300296, 459310005, 523038718, 523029852, 523020986, 713171014, 559722414, 559727262, 559732110, 559736958, 559741806, 717861983, 559751502, 43621454, 319176687, 319186115, 329478992, 329472817, 329466642, 329460467, 384091635, 329448117, 329441942, 329435767, 973320613, 34317599, 556262962, 34298665, 34289198, 34279731, 34270264, 497986007, 959357786, 497972531, 188354794, 188353544, 124193502, 124196622, 124199742, 124202862, 124205982, 124209102, 497334122, 124215342, 124218462, 104115006, 104108772, 206169295, 206174817, 206180339, 206185861, 244178382, 285319866, 285314619, 285309372, 285304125, 784828197, 285293631, 285288384, 285283137, 285277890, 285272643, 986587858, 986588360, 986588862, 986589364, 986589866, 986590368, 986590870, 617621492, 986591874, 628802373, 628799526, 628796679, 628793832, 192922274, 628788138, 628785291, 671177678, 671172048, 671166418, 671160788, 190805003, 671149528, 671143898, 193573590, 193579136, 193584682, 31844997, 193595774, 193601320, 193606866, 193612412, 96311462, 96320716, 961588968, 96339224, 96348478, 96357732, 171586837, 171577202, 171567567, 171557932, 171548297, 171538662, 171529027, 103432704, 853221557, 754978107, 754976639, 221761386, 754973703, 754972235, 152348116, 960959897, 152348140, 152348152, 266437506, 266437202, 266436898, 266436594, 266436290, 266435986, 266435682, 454494964, 266435074, 769327292, 769331220, 769335148, 333290664, 689797752, 689787809, 689777866, 689767923, 94320683, 689748037, 689738094, 689728151, 178416607, 666307237, 666306808, 666306379, 666305950, 901761678, 540043771, 901778314, 901786632, 901794950, 901803268, 901811586, 13558389, 710070492, 710076522, 710082552, 137618762, 206712481, 137627746, 137632238, 137636730, 137641222, 137645714, 137650206, 137654698, 509710619, 451314943, 451308272, 451301601, 808253784, 276676850, 23822474, 23815342, 23808210, 23801078, 23793946, 156573263, 156564233, 156555203, 156546173, 691665722, 137191846, 137199572, 137207298, 765964172, 137222750, 137230476, 137238202, 137245928, 22499226, 22506730, 22514234, 22521738, 22529242, 22536746, 170112854, 872384401, 872386388, 872388375, 872390362, 872392349, 928416239, 872396323, 872398310, 815345770, 815343066, 252466454, 815337658, 815334954, 815332250, 815329546, 815326842, 969970392, 969967071, 673737023, 634510467, 634506919, 634503371, 634499823, 634496275, 197432348, 197440963, 197449578, 181646645, 197466808, 202259803, 673354442, 673354423, 625081062, 673354385, 673354366, 442312535, 442313494, 442314453, 442315412, 442316371, 442317330, 516463572, 442319248, 661125539, 661119726, 2369482, 465194354, 360996493, 465209172, 465216581, 83437603, 83443618, 83449633, 83455648, 83461663, 83467678, 457627942, 620160961, 620158841, 620156721, 620154601, 620152481, 100726234, 620148241, 620146121, 620144001, 436289192, 889995174, 436271602, 436262807, 436254012, 436245217, 436236422, 436227627, 436218832, 436210037, 512562543, 488912566, 512558693, 512556768, 795133498, 795128925, 369985124, 369990825, 369996526, 370002227, 370007928, 821136398, 370019330, 370025031, 370030732, 370036433, 854101640, 957936107, 854097528, 854095472, 990584661, 990587793, 249853881, 249847238, 969037857, 969028160, 628213581, 468387398, 468394506, 468401614, 468408722, 468415830, 468422938, 824279006, 624387526, 624383763, 624380000, 774523452, 624372474, 624368711, 624364948, 624361185, 715836352, 768892662, 663383769, 768886658, 768883656, 768880654, 768877652, 354099853, 354098346, 790599581, 790609559, 790619537, 243661019, 507473236, 316951119, 316953521, 316955923, 316958325, 316960727, 316963129, 316965531, 356666571, 356659923, 690857497, 690865215, 652161282, 690880651, 690888369, 690896087, 690903805, 28611631, 28620260, 28628889, 343389216, 28646147, 28654776, 28663405, 28672034, 937707762, 946336457, 330825367, 330817326, 330809285, 330801244, 330793203, 330785162, 502537596, 502528226, 707722356, 502509486, 502500116, 889687527, 889689947, 889692367, 268705818, 889697207, 889699627, 889702047, 889704467, 889706887, 92973297, 92975223, 92977149, 92979075, 92981001, 374359982, 92984853, 506601446, 506593387, 506585328, 506577269, 971196728, 506561151, 506553092, 506545033, 738674550, 460122506, 738669088, 93841610, 93833884, 93826158, 93818432, 456487676, 93802980, 93795254, 93787528, 93779802, 93772076, 132765916, 132763436, 132760956, 132758476, 132755996, 330891210, 835385406, 835383539, 358273499, 835379805, 835377938, 835376071, 835374204, 835372337, 584077007, 485211944, 485216240, 485220536, 485224832, 844350166, 485233424, 485237720, 485242016, 585551355, 585550217, 697113432, 697106332, 697099232, 697092132, 697085032, 442451591, 697070832, 743364012, 357396869, 946108125, 946103856, 946099587, 946095318, 82149124, 926455803, 926456333, 926456863, 926457393, 507874922, 926458453, 926458983, 926459513, 926460043, 926460573, 217773500, 217075885, 217067204, 217058523, 217049842, 217041161, 477948335, 217023799, 711799045, 711793324, 711787603, 711781882, 711776161, 711770440, 711764719, 711758998, 954454677, 431805176, 431800875, 816766697, 816764146, 816761595, 453238410, 842282858, 842281275, 842279692, 842278109, 842276526, 842274943, 842273360, 842271777, 842270194, 385628892, 711472787, 711467667, 711462547, 711457427, 160156759, 711447187, 711442067, 711436947, 711431827, 73846068, 73848339, 73850610, 73852881, 696830328, 558642999, 558633860, 558624721, 419137061, 558606443, 558597304, 840757521, 420905078, 345504019, 345511855, 345519691, 345527527]

INPUT = './coding-questions/input.txt.orig'
ANS = './coding-questions/ans.txt'

# skip = [16]
skip = []
# skip = []

def main():
    with open(INPUT, 'r') as f:
        with open(ANS, 'r') as g:
            t = int(f.readline())
            for i in range(1, t+1):
                N = int(f.readline())
                # print(N)
                arr = [int(s) for s in f.readline().split(" ")]
                # print("Case #{0}: {1}".format(i, longest_arithmetic_subarray(N, arr)))
                if i not in skip:
                    out = "Case #{0}: {1}".format(i, longest_arithmetic_subarray(N, arr, i))
                    correct = g.readline().strip()
                    print(out)
                    assert out == correct, f'Algorithm output {out}, correct output {correct}, N is {N}'
                    # print(f"Completed #{i}")
            print('All tests completed without error')
                # else:
                #     with open('out.txt', 'w') as h:
                #         h.write(str(arr))
                #     g.readline()  # skip this answer

if __name__ == '__main__':
    main()
    # pass
    # print(longest_arithmetic_subarray(1994, arr_example))